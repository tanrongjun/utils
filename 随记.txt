git push origin dev-trj:develop
git reset --soft HEAD~1

transparent: 透明度
CSSProperties

IOS默认音频支持格式: AAC

// 二维数组
Array.from(new Array(5), _ => new Array(5).fill(0))
Array(5).fill(0).map(()=>Array(5).fill(0))
[1, null, undefined, 3, '', 'er', , {}, [], '2344'].filter(Boolean)

ts变量后加!：表示类型推断排除null，undefined

React路由拦截实现方式
	1、umi中可使用wrappers，配置路由的高阶组件封装
	2、使用高阶组件包裹需要鉴权的组件

虚拟列表的核心原理
	只渲染页面可见/展示的条数
	列表滚动时，变更可视区域的渲染元素
	通过滚动事件监听，计算每个item的高度、滚动距离、start、end、并做数据截取，展示截取后的数据


每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的原型对象的指针，而实例都包含一个原型对象的指针

功能组件：搜索、上传、富文本、空组件、全局loading、表格拖拽、弹框（封装组件思想：子组件想要什么，父组件想通过子组件获得什么）
业务组件/普通父子组件需注意渲染次数，通过memo，useMemo，useCallback优化

从语法层面来说 vue3使用起来更方便简单 不用像使用react的时候 要担心出现性能问题 闭包陷阱等。
从组件层面来说 react的组件更加直观 事件和传值都是props 而vue是props+emit 模板语法+ts没有react契合度高

状态维护的好坏标准在于状态的改变是否引起的是最小原子化的视图重渲染

常见的内存泄漏
	1、意外声明的全局变量
	2、被遗忘的定时器
	3、使用不当的闭包
	4、未清理的DOM引用

Promise.all使用场景：多文件服务器上传；请求数据处理（如给列表中每条数据向后端发送请求，并给每条数据添加上新的数据）
Promise.race使用场景：把异步操作和定时器放到一起，如果定时器先触发，认为超时，告知用户

Axios请求拦截先进后出，相应拦截先进先出

AbortController：中止控制器（如取消请求；处理一些竞态问题）

难点：竞态问题、IOS触底加载（延迟500ms请求）...
